{"ast":null,"code":"new Vue({\n  el: '#app',\n  data: {\n    // ① 変数を宣言する部分\n    status: 'init',\n    // 状況\n    recorder: null,\n    // 音声にアクセスする \"MediaRecorder\" のインスタンス\n    audioData: [],\n    // 入力された音声データ\n    audioExtension: '' // 音声ファイルの拡張子\n\n  },\n  methods: {\n    // ② 録音を開始／ストップする部分\n    startRecording: function startRecording() {\n      this.status = 'recording';\n      this.audioData = [];\n      this.recorder.start();\n    },\n    stopRecording: function stopRecording() {\n      this.recorder.stop();\n      this.status = 'ready';\n    },\n    // ④ 音声ファイルの拡張子を取得する部分\n    getExtension: function getExtension(audioType) {\n      var extension = 'wav';\n      var matches = audioType.match(/audio\\/([^;]+)/);\n\n      if (matches) {\n        extension = matches[1];\n      }\n\n      return '.' + extension;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // ⑤ マイクにアクセス\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(function (stream) {\n      _this.recorder = new MediaRecorder(stream);\n\n      _this.recorder.addEventListener('dataavailable', function (e) {\n        _this.audioData.push(e.data);\n\n        _this.audioExtension = _this.getExtension(e.data.type);\n      });\n\n      _this.recorder.addEventListener('stop', function () {\n        var audioBlob = new Blob(_this.audioData);\n        fetch('https://westus.api.cognitive.microsoft.com/speaker/identification/v2.0/text-independent/profiles/identifySingleSpeaker?profileIds=34349224-8943-4073-8a42-e6bc6e35eb31,44b1405c-dc29-48c5-b916-cf344e2d26b3,94fa8cdd-afac-4c29-976d-44f766201e39&ignoreMinLength={true}', {\n          method: 'POST',\n          headers: {\n            \"Ocp-Apim-Subscription-Key\": \"94a7ea4342be483a8b1e3a4c039ecdd0\",\n            \"Content-Type\": \"audio/wav\"\n          },\n          body: audioBlob\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          console.log(data);\n        })[\"catch\"](function (err) {\n          console.log(err);\n        });\n      });\n\n      _this.status = 'ready';\n    });\n  }\n});","map":{"version":3,"sources":["/Users/hayat/voice_component/app/javascript/packs/voice_recording_vue.js"],"names":["Vue","el","data","status","recorder","audioData","audioExtension","methods","startRecording","start","stopRecording","stop","getExtension","audioType","extension","matches","match","mounted","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","addEventListener","e","push","type","audioBlob","Blob","fetch","method","headers","body","response","json","console","log","err"],"mappings":"AAAM,IAAIA,GAAJ,CAAQ;AACNC,EAAAA,EAAE,EAAE,MADE;AAENC,EAAAA,IAAI,EAAE;AAEJ;AACAC,IAAAA,MAAM,EAAE,MAHJ;AAGgB;AACpBC,IAAAA,QAAQ,EAAE,IAJN;AAIgB;AACpBC,IAAAA,SAAS,EAAE,EALP;AAKgB;AACpBC,IAAAA,cAAc,EAAE,EANZ,CAMgB;;AANhB,GAFA;AAWNC,EAAAA,OAAO,EAAE;AAEP;AACAC,IAAAA,cAHO,4BAGU;AAEf,WAAKL,MAAL,GAAc,WAAd;AACA,WAAKE,SAAL,GAAiB,EAAjB;AACA,WAAKD,QAAL,CAAcK,KAAd;AAED,KATM;AAUPC,IAAAA,aAVO,2BAUS;AAEd,WAAKN,QAAL,CAAcO,IAAd;AACA,WAAKR,MAAL,GAAc,OAAd;AAED,KAfM;AAiBL;AACAS,IAAAA,YAlBK,wBAkBQC,SAlBR,EAkBmB;AAEtB,UAAIC,SAAS,GAAG,KAAhB;AACA,UAAMC,OAAO,GAAGF,SAAS,CAACG,KAAV,CAAgB,gBAAhB,CAAhB;;AAEA,UAAGD,OAAH,EAAY;AAETD,QAAAA,SAAS,GAAGC,OAAO,CAAC,CAAD,CAAnB;AAEF;;AAED,aAAO,MAAKD,SAAZ;AAED;AA/BI,GAXH;AA6CJG,EAAAA,OA7CI,qBA6CM;AAAA;;AAER;AACAC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAApC,EACGC,IADH,CACQ,UAAAC,MAAM,EAAI;AAEd,MAAA,KAAI,CAACnB,QAAL,GAAgB,IAAIoB,aAAJ,CAAkBD,MAAlB,CAAhB;;AACA,MAAA,KAAI,CAACnB,QAAL,CAAcqB,gBAAd,CAA+B,eAA/B,EAAgD,UAAAC,CAAC,EAAI;AAEnD,QAAA,KAAI,CAACrB,SAAL,CAAesB,IAAf,CAAoBD,CAAC,CAACxB,IAAtB;;AACA,QAAA,KAAI,CAACI,cAAL,GAAsB,KAAI,CAACM,YAAL,CAAkBc,CAAC,CAACxB,IAAF,CAAO0B,IAAzB,CAAtB;AAED,OALD;;AAMA,MAAA,KAAI,CAACxB,QAAL,CAAcqB,gBAAd,CAA+B,MAA/B,EAAuC,YAAM;AAE3C,YAAMI,SAAS,GAAG,IAAIC,IAAJ,CAAS,KAAI,CAACzB,SAAd,CAAlB;AACA0B,QAAAA,KAAK,CAAC,yQAAD,EAA4Q;AAC/QC,UAAAA,MAAM,EAAE,MADuQ;AAE/QC,UAAAA,OAAO,EAAE;AACP,yCAA4B,kCADrB;AAEP,4BAAe;AAFR,WAFsQ;AAM/QC,UAAAA,IAAI,EAAEL;AANyQ,SAA5Q,CAAL,CAOGP,IAPH,CAOQ,UAAAa,QAAQ,EAAI;AAClB,iBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,SATD,EASGd,IATH,CASQ,UAAApB,IAAI,EAAI;AACdmC,UAAAA,OAAO,CAACC,GAAR,CAAYpC,IAAZ;AACD,SAXD,WAWS,UAAAqC,GAAG,EAAI;AACdF,UAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD,SAbD;AAcD,OAjBD;;AAkBA,MAAA,KAAI,CAACpC,MAAL,GAAc,OAAd;AAED,KA9BH;AAgCC;AAhFC,CAAR","sourcesContent":["      new Vue({\n        el: '#app',\n        data: {\n\n          // ① 変数を宣言する部分\n          status: 'init',     // 状況\n          recorder: null,     // 音声にアクセスする \"MediaRecorder\" のインスタンス\n          audioData: [],      // 入力された音声データ\n          audioExtension: ''  // 音声ファイルの拡張子\n\n        },\n        methods: {\n\n          // ② 録音を開始／ストップする部分\n          startRecording() {\n\n            this.status = 'recording';\n            this.audioData = [];\n            this.recorder.start();\n\n          },\n          stopRecording() {\n\n            this.recorder.stop();\n            this.status = 'ready';\n\n          },\n\n            // ④ 音声ファイルの拡張子を取得する部分\n            getExtension(audioType) {\n\n              let extension = 'wav';\n              const matches = audioType.match(/audio\\/([^;]+)/);\n\n              if(matches) {\n\n                 extension = matches[1];\n\n              }\n\n              return '.'+ extension;\n\n            }\n\n          },\n          mounted() {\n\n            // ⑤ マイクにアクセス\n            navigator.mediaDevices.getUserMedia({ audio: true })\n              .then(stream => {\n\n                this.recorder = new MediaRecorder(stream);\n                this.recorder.addEventListener('dataavailable', e => {\n\n                  this.audioData.push(e.data);\n                  this.audioExtension = this.getExtension(e.data.type);\n\n                });\n                this.recorder.addEventListener('stop', () => {\n\n                  const audioBlob = new Blob(this.audioData);\n                  fetch('https://westus.api.cognitive.microsoft.com/speaker/identification/v2.0/text-independent/profiles/identifySingleSpeaker?profileIds=34349224-8943-4073-8a42-e6bc6e35eb31,44b1405c-dc29-48c5-b916-cf344e2d26b3,94fa8cdd-afac-4c29-976d-44f766201e39&ignoreMinLength={true}', {\n                    method: 'POST',\n                    headers: {\n                      \"Ocp-Apim-Subscription-Key\":\"94a7ea4342be483a8b1e3a4c039ecdd0\",\n                      \"Content-Type\":\"audio/wav\"\n                    },\n                    body: audioBlob\n                  }).then(response => {\n                    return response.json();\n                  }).then(data => {\n                    console.log(data);\n                  }).catch(err => {\n                    console.log(err);\n                  })\n                });\n                this.status = 'ready';\n\n              });\n\n            }\n        });\n\n\n"]},"metadata":{},"sourceType":"module"}